version: '3.9'

services:

# ======================================================================================================
# ======================================================================================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - default
      - kafka

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka
    ports:
      - "8097:8097"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://kafka:8097,INTERNAL://kafka:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - default
      - kafka

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    hostname: control-center
    depends_on:
      - kafka
    ports:
      - ":9021"
    expose:
      - 9021
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka:19092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      SCHEMA_REGISTRY_URL: "http://schema-registry:8082"  
      PORT: 9021
    networks:
      - default
      - kafka
    restart: always

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:7.2.1
  #   container_name: schema-registry
  #   depends_on:
  #     - kafka
  #   ports:
  #     - "8082:8082"
  #   environment:
  #     SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka:19092"
  #   networks:
  #     - kafka

  mysql-kc:
    container_name: mysql-kc
    image: mysql:8.0
    ports:
      - 3306:3306
    restart: unless-stopped
    environment:
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: keycloak
      MYSQL_DATABASE: keycloak
      # Self-Explanatory
      MYSQL_ROOT_PASSWORD: admin
    volumes:
      - ./data2/mysql-keycloak:/var/lib/mysql
      - ./keycloak.sql:/docker-entrypoint-initdb.d/init.sql # Mount the SQL file
    networks:
      - keycloak-and-mysql-network

  keycloak-w:
    image: quay.io/keycloak/keycloak:26.0.5
    ports:
      - 8080:8080
    restart: unless-stopped
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HOSTNAME: 34.154.26.62
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false
      KC_DB: mysql
      KC_DB_URL_HOST: mysql-kc
      KC_DB_URL_PORT: 3306
      KC_DB_SCHEMA: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_DB_URL_DATABASE: keycloak
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    depends_on:
      - mysql-kc
    volumes:
      - ./keycloak-realm-data3:/opt/jboss/keycloak/standalone/data
    networks:
      - keycloak-and-mysql-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    restart: unless-stopped
    ports:
      - "8081:80"
    environment:
      PMA_HOST: mysql-kc
      MYSQL_ROOT_PASSWORD: admin
    depends_on:
      - mysql-kc
    networks:
      - keycloak-and-mysql-network

# ======================================================================================================
# ======================================================================================================

  order_db:
    image: postgres
    container_name: order_db
    restart: always
    ports:
      - ":5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 5409
      POSTGRES_DB: orders
    volumes:
      - ./data/order_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  product_db:
    image: postgres
    container_name: product_db
    restart: always
    ports:
      - ":5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 5409
      POSTGRES_DB: products
    volumes:
      - ./data/product_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

# ======================================================================================================
# ======================================================================================================

  order_service:
    build:
      context: ./src/order_service
    container_name: order_service
    restart: always
    ports:
      - "${PORT_orders}:${PORT_orders}"
    depends_on:
      order_db:
        condition: service_healthy
    environment:
      DB_HOST: order_db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: 5409
      DB_NAME: orders
    volumes:
      - ./:/app

  product_service:
    build: 
      context: ./src/product_service
    container_name: product_service
    restart: always
    ports:
      - "${PORT_products}:${PORT_products}"
    depends_on:
      product_db:
        condition: service_healthy
    environment:
      DB_HOST: product_db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: 5409
      DB_NAME: products
    volumes:
      - ./:/app
# ======================================================================================================
# ======================================================================================================

  frontend:
    build:
      context: ./frontend 
    container_name: frontend
    restart: always
    ports:
      - "5500:80"
    depends_on:
      - order_service
      - product_service
    volumes:
      - ./frontend:/usr/local/apache2/htdocs

# ======================================================================================================
# ======================================================================================================

networks:
  default:
    driver: bridge
  keycloak-and-mysql-network:
  kafka:

# ports i need in the code: 5500,80,5432,3306,9021,2181,5000,5001,8080,8097